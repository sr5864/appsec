My crash1.gft exploits the number of bytes allocated to memory. If more bytes are trying to be read than are allocated the program crashes. I fixed this by making sure that the pointer is not set to 0x00 after it was set to the requested memory. If it was then I exit the program.My crash2.gft exploits the fact that the user supplies the value for arg1 in the function animate. When the program runs the animate function, it is only assigned 16 registers. When animate runs and goes to case 0x01, if args1 is more than 15 or less than 0 it will cause the program to crash. I fixed this by checking to make sure that arg1 is less than 15 and greater than 0 otherwise I break out of the function.My hang.gft file also exploits the fact that the user supplies the value for arg1. It makes the program go to case 0x09 and sets the program counter to -3. This way the program counter is never updated and always remains less than program+256. I fixed this by adding in an instruction counter and max operations. If the amount of instructions exceeds the max operations then the function breaks.